2099. Find Subsequence of Length K With the Largest Sum


You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.

Return any such subsequence as an integer array of length k.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [2,1,3,3], k = 2
Output: [3,3]
Explanation:
The subsequence has the largest sum of 3 + 3 = 6.



class Solution {
    public int[] maxSubsequence(int[] nums, int k) {
        int n = nums.length;
        if (k == n)
            return nums;

        // Pair: index and value
        int[][] vec = new int[n][2];
        for (int i = 0; i < n; i++) {
            vec[i][0] = i;      // index
            vec[i][1] = nums[i]; // value
        }

        // Sort by value descending
        Arrays.sort(vec, (a, b) -> Integer.compare(b[1], a[1]));

        // Then sort the top-k by original index to maintain order
        Arrays.sort(vec, 0, k, Comparator.comparingInt(a -> a[0]));

        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = vec[i][1];
        }

        return result;
    }
}
