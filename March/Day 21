2115. Find All Possible Recipes from Given Supplies

You have information about n different recipes. You are given a string array recipes and a 2D string array ingredients. The ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. A recipe can also be an ingredient for other recipes, i.e., ingredients[i] may contain a string that is in recipes.
You are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them.
Return a list of all the recipes that you can create. You may return the answer in any order. 
Note that two recipes may contain each other in their ingredients.

Example 1:

Input: recipes = ["bread"], ingredients = [["yeast","flour"]], supplies = ["yeast","flour","corn"]
Output: ["bread"]
Explanation:
We can create "bread" since we have the ingredients "yeast" and "flour".


class Solution {
    public List<String> findAllRecipes(String[] recipes, List<List<String>> ingredients, String[] supplies) {
        int n = recipes.length;
        Set<String> st = new HashSet<>(Arrays.asList(supplies));
        
        // adj
        Map<String, List<Integer>> adj = new HashMap<>(); // ing ---> recipe
        int[] indegree = new int[n];
        
        for (int i = 0; i < n; i++) {
            for (String ing : ingredients.get(i)) {
                if (!st.contains(ing)) {
                    adj.putIfAbsent(ing, new ArrayList<>());
                    adj.get(ing).add(i);
                    indegree[i]++;
                }
            }
        }
        
        Queue<Integer> que = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                que.add(i);
            }
        }
        
        List<String> result = new ArrayList<>();
        while (!que.isEmpty()) {
            int i = que.poll();
            String recipe = recipes[i];
            result.add(recipe);
            
            if (adj.containsKey(recipe)) {
                for (int idx : adj.get(recipe)) {
                    indegree[idx]--;
                    if (indegree[idx] == 0) {
                        que.add(idx);
                    }
                }
            }
        }
        
        return result;
    }
}
