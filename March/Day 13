3356. Zero Array Transformation II

You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].
Each queries[i] represents the following action on nums:

Decrement the value at each index in the range [li, ri] in nums by at most vali.
The amount by which each value is decremented can be chosen independently for each index.
A Zero Array is an array with all its elements equal to 0.

Return the minimum possible non-negative value of k, such that after processing the first k queries in sequence, nums becomes a Zero Array. If no such k exists, return -1.

Example 1:

Input: nums = [2,0,2], queries = [[0,2,1],[0,2,1],[1,1,3]]

Output: 2

Explanation:

For i = 0 (l = 0, r = 2, val = 1):
Decrement values at indices [0, 1, 2] by [1, 0, 1] respectively.
The array will become [1, 0, 1].
For i = 1 (l = 0, r = 2, val = 1):
Decrement values at indices [0, 1, 2] by [1, 0, 1] respectively.
The array will become [0, 0, 0], which is a Zero Array. Therefore, the minimum value of k is 2.


class Solution {
    private int n;
    private int Q;

    private boolean checkWithDifferenceArrayTeq(int[] nums, int[][] queries, int k) {
        int[] diff = new int[n];

        //O(Q)
        for (int i = 0; i <= k; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            int x = queries[i][2];

            diff[l] += x;
            if (r + 1 < n)
                diff[r + 1] -= x;
        }

        int cumSum = 0;
        //O(n)
        for (int i = 0; i < n; i++) {
            cumSum += diff[i];
            diff[i] = cumSum;

            if (nums[i] - diff[i] > 0) { //nums[i] 0 nahi ban paya
                return false;
            }
        }

        return true;
    }

    public int minZeroArray(int[] nums, int[][] queries) {
        n = nums.length;
        Q = queries.length;

        if (Arrays.stream(nums).allMatch(x -> x == 0)) {
            return 0; //no query required because all are already zero
        }

        int l = 0;
        int r = Q - 1;
        int k = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;

            if (checkWithDifferenceArrayTeq(nums, queries, mid)) {
                k = mid + 1; //possible answer
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        return k;
    }
}
