1399. Count Largest Group

You are given an integer n.
Each number from 1 to n is grouped according to the sum of its digits.
Return the number of groups that have the largest size.

Example 1:

Input: n = 13
Output: 4
Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:
[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].
There are 4 groups with largest size.


class Solution {
    private int findDigitsSum(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }

    public int countLargestGroup(int n) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int maxSize = 0;
        int count = 0;

        for (int num = 1; num <= n; num++) {
            int digitsSum = findDigitsSum(num);
            map.put(digitsSum, map.getOrDefault(digitsSum, 0) + 1);

            if (map.get(digitsSum) == maxSize) {
                count++;
            } else if (map.get(digitsSum) > maxSize) {
                maxSize = map.get(digitsSum);
                count = 1;
            }
        }

        return count;
    }
}
