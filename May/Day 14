3337. Total Characters in String After Transformations II

You are given a string s consisting of lowercase English letters, an integer t representing the number of transformations to perform, and an array nums of size 26. In one transformation, every character in s is replaced according to the following rules:

Replace s[i] with the next nums[s[i] - 'a'] consecutive characters in the alphabet. For example, if s[i] = 'a' and nums[0] = 3, the character 'a' transforms into the next 3 consecutive characters ahead of it, which results in "bcd".
The transformation wraps around the alphabet if it exceeds 'z'. For example, if s[i] = 'y' and nums[24] = 3, the character 'y' transforms into the next 3 consecutive characters ahead of it, which results in "zab".
Return the length of the resulting string after exactly t transformations.

Since the answer may be very large, return it modulo 109 + 7.

 
Example 1:

Input: s = "abcyy", t = 2, nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]

Output: 7

Explanation:

First Transformation (t = 1):

'a' becomes 'b' as nums[0] == 1
'b' becomes 'c' as nums[1] == 1
'c' becomes 'd' as nums[2] == 1
'y' becomes 'z' as nums[24] == 1
'y' becomes 'z' as nums[24] == 1
String after the first transformation: "bcdzz"
Second Transformation (t = 2):

'b' becomes 'c' as nums[1] == 1
'c' becomes 'd' as nums[2] == 1
'd' becomes 'e' as nums[3] == 1
'z' becomes 'ab' as nums[25] == 2
'z' becomes 'ab' as nums[25] == 2
String after the second transformation: "cdeabab"
Final Length of the string: The string is "cdeabab", which has 7 characters.


 import java.util.*;

public class Solution {

    static final int MOD = 1_000_000_007;

    public int lengthAfterTransformations(String s, int t, List<Integer> numsList) {

        // Convert List<Integer> to int[]

        int[] nums = new int[26];

        for (int i = 0; i < 26; i++) {

            nums[i] = numsList.get(i);

        }

        // Build transformation matrix

        int[][] T = getTransformationMatrix(nums);

        // Raise matrix to power t

        int[][] poweredT = matrixPow(T, t);

        // Count of each character in the input string

        int[] count = new int[26];

        for (char c : s.toCharArray()) {

            count[c - 'a']++;

        }

        // Apply the transformation matrix t times to the frequency vector

        int[] lengths = new int[26];

        for (int i = 0; i < 26; i++) {

            for (int j = 0; j < 26; j++) {

                lengths[j] = (int)((lengths[j] + 1L * count[i] * poweredT[i][j]) % MOD);

            }

        }

        // Total length after transformations

        int total = 0;

        for (int len : lengths) {

            total = (total + len) % MOD;

        }

        return total;

    }

    private int[][] getTransformationMatrix(int[] nums) {

        int[][] T = new int[26][26];

        for (int i = 0; i < 26; i++) {

            for (int step = 1; step <= nums[i]; step++) {

                int next = (i + step) % 26;

                T[i][next]++;

            }

        }

        return T;

    }

    private int[][] getIdentityMatrix(int size) {

        int[][] I = new int[size][size];

        for (int i = 0; i < size; i++) {

            I[i][i] = 1;

        }

        return I;

    }

    private int[][] matrixMult(int[][] A, int[][] B) {

        int size = A.length;

        int[][] C = new int[size][size];

        for (int i = 0; i < size; i++) {

            for (int j = 0; j < size; j++) {

                long sum = 0;

                for (int k = 0; k < size; k++) {

                    sum = (sum + 1L * A[i][k] * B[k][j]) % MOD;

                }

                C[i][j] = (int) sum;

            }

        }

        return C;

    }

    private int[][] matrixPow(int[][] M, int n) {

        if (n == 0) return getIdentityMatrix(M.length);

        if (n % 2 == 1) return matrixMult(M, matrixPow(M, n - 1));

        int[][] half = matrixPow(M, n / 2);

        return matrixMult(half, half);

    }

}
