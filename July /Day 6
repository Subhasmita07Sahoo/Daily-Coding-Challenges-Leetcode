1865. Finding Pairs With a Certain Sum

You are given two integer arrays nums1 and nums2. You are tasked to implement a data structure that supports queries of two types:

Add a positive integer to an element of a given index in the array nums2.
Count the number of pairs (i, j) such that nums1[i] + nums2[j] equals a given value (0 <= i < nums1.length and 0 <= j < nums2.length).
Implement the FindSumPairs class:

FindSumPairs(int[] nums1, int[] nums2) Initializes the FindSumPairs object with two integer arrays nums1 and nums2.
void add(int index, int val) Adds val to nums2[index], i.e., apply nums2[index] += val.
int count(int tot) Returns the number of pairs (i, j) such that nums1[i] + nums2[j] == tot.
 

Example 1:

Input
["FindSumPairs", "count", "add", "count", "count", "add", "add", "count"]
[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]
Output
[null, 8, null, 2, 1, null, null, 11]


class FindSumPairs {
    private List<Integer> nums1;
    private List<Integer> nums2;
    private Map<Integer, Integer> frequencyMap;

    public FindSumPairs(int[] nums1, int[] nums2) {
        this.nums1 = new ArrayList<>();
        for (int num : nums1) {
            this.nums1.add(num);
        }

        this.nums2 = new ArrayList<>();
        for (int num : nums2) {
            this.nums2.add(num);
        }

        frequencyMap = new HashMap<>();
        for (int num : nums2) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
    }

    public void add(int index, int val) {
        int oldVal = nums2.get(index);
        frequencyMap.put(oldVal, frequencyMap.get(oldVal) - 1);
        if (frequencyMap.get(oldVal) == 0) {
            frequencyMap.remove(oldVal);
        }

        int newVal = oldVal + val;
        nums2.set(index, newVal);
        frequencyMap.put(newVal, frequencyMap.getOrDefault(newVal, 0) + 1);
    }

    public int count(int tot) {
        int count = 0;
        for (int num : nums1) {
            int complement = tot - num;
            count += frequencyMap.getOrDefault(complement, 0);
        }
        return count;
    }
}
