3307. Find the K-th Character in String Game II

Alice and Bob are playing a game. Initially, Alice has a string word = "a".
You are given a positive integer k. You are also given an integer array operations, where operations[i] represents the type of the ith operation.
Now Bob will ask Alice to perform all operations in sequence:
If operations[i] == 0, append a copy of word to itself.
If operations[i] == 1, generate a new string by changing each character in word to its next character in the English alphabet, and append it to the original word. For example, performing the operation on "c" generates "cd" and performing the operation on "zb" generates "zbac".
Return the value of the kth character in word after performing all the operations.

Note that the character 'z' can be changed to 'a' in the second type of operation.

Example 1:

Input: k = 5, operations = [0,0,0]
Output: "a"
Explanation:
Initially, word == "a". Alice performs the three operations as follows:
Appends "a" to "a", word becomes "aa".
Appends "aa" to "aa", word becomes "aaaa".
Appends "aaaa" to "aaaa", word becomes "aaaaaaaa".


class Solution {
    public char kthCharacter(long k, int[] operations) {
        // Base case: if k is 1, return 'a'
        if (k == 1) {
            return 'a';
        }

        int n = operations.length; // Length of the operations array
        int opType = 0; // To store the operation type (0 or 1)
        long len = 1; // Start with length 1 (initial 'a')
        long newK = k; // To store the adjusted k value

        // Determine the operation type by traversing the operations array
        for (int i = 0; i < n; i++) {
            len *= 2; // Double the length
            if (len >= k) { // Check if the length has surpassed k
                opType = operations[i]; // Get the current operation type
                newK = k - len / 2; // Adjust k for the recursive call
                break;
            }
        }

        // Recursive call to find the character before the operation is applied
        char res = kthCharacter(newK, operations);

        // If operation type is 0, return the result as is
        if (opType == 0) 
            return res;

        // If operation type is 1, transform the character
        if (res == 'z') 
            return 'a';

        return (char) (res + 1); // Increment character by 1
    }
}
