1749. Maximum Absolute Sum of Any Subarray

You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).
Return the maximum absolute sum of any (possibly empty) subarray of nums.
Note that abs(x) is defined as follows:

If x is a negative integer, then abs(x) = -x.
If x is a non-negative integer, then abs(x) = x.
 

Example 1:

Input: nums = [1,-3,2,3,-4]
Output: 5
Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.


class Solution {
    public int maxAbsoluteSum(int[] nums) {
        int n = nums.length;

        int maxSum = nums[0];
        int minSum = nums[0];

        int currSumMax = nums[0];
        int currSumMin = nums[0];

        for (int i = 1; i < n; i++) {
            //Kadane's Algo for finding max subarray sum
            currSumMax = Math.max(nums[i], currSumMax + nums[i]);
            maxSum = Math.max(maxSum, currSumMax);

            //Kadane's Algo for finding min subarray sum
            currSumMin = Math.min(nums[i], currSumMin + nums[i]);
            minSum = Math.min(minSum, currSumMin);
        }

        return Math.max(maxSum, Math.abs(minSum));
    }
}
