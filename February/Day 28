1092. Shortest Common Supersequence

Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.
A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.


class Solution {
    public String shortestCommonSupersequence(String s1, String s2) {
        
  int n = s1.length();
  int m = s2.length();

  int[][] dp =new int[n+1][m+1];
  for (int i = 0; i <= n; i++) {
    dp[i][0] = 0;
  }
  for (int i = 0; i <= m; i++) {
    dp[0][i] = 0;
  }

  for (int ind1 = 1; ind1 <= n; ind1++) 
  {
    for (int ind2 = 1; ind2 <= m; ind2++)
    {
      if (s1.charAt(ind1 - 1) == s2.charAt(ind2 - 1))
        dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];
      else
        dp[ind1][ind2] = 0 + Math.max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1]);
    }
  }

  int len = dp[n][m];
  int i = n;
  int j = m;
        
  String ans = "";

  while (i > 0 && j > 0) 
  {
    if (s1.charAt(i - 1) == s2.charAt(j - 1)) 
    {
      ans += s1.charAt(i-1);
      i--;
      j--;
    }
    else if (dp[i - 1][j] > dp[i][j - 1]) 
    {
        ans += s1.charAt(i-1);
        i--;
    } 
    else 
    {
        ans += s2.charAt(j-1);
        j--;
    }
  }
  
  //Adding Remaing Characters - Only one of the below two while loops will run 
  
  while(i>0)
  {
      ans += s1.charAt(i-1);
      i--;
  }
  while(j>0)
  {
      ans += s2.charAt(j-1);
      j--;
  }

  String ans2=new StringBuilder(ans).reverse().toString();   // reverse to get answer
  
  return ans2;
        
    }
}
